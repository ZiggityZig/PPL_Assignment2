(define append 
  (lambda(lst1 lst2)
      ((empty? lst) ? (lst2) (cons (car lst1) (append (cdr lst1)lst2) ))
  )
)

(define reverse 
  (lambda (lst)
        (empty? lst ? ('()) (append (reverse (cdr lst)) (cons (car lst)) '() ))  
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      @TODO
   )
)


(define payment
  (lambda (n coins-lst)
        @TODO
  )
)
                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)
