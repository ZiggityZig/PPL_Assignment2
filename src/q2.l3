(define append 
  (lambda(lst1 lst2)
    (if (empty? lst1) 
      lst2
      (cons (car lst1) (append (cdr lst1) lst2)))))

(define reverse 
  (lambda (lst)
    (if (empty? lst)
        '()
        (append (reverse (cdr lst)) (list (car lst))))))


(define duplicate-items
   (lambda(lst dup-count)
    (if (empty? lst)
      '()
      (append(duplicateDigit (car lst) (car dup-count)) (duplicate-items (cdr lst) (append (cdr dup-count) (cons(car dup-count) '() )) ))
     )
   )
)

(define duplicateDigit
  (lambda(digit numOfApparnces)
  (if (= numOfApparnces 0)
      '()
  (append(cons digit (duplicateDigit digit (- numOfApparnces 1)))))
  )
)


(define payment
  (lambda (n coins-lst)
        
  )
)
                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)
